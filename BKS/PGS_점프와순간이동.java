package BKS;

public class PGS_점프와순간이동 {
    public static void main(String[] args) {
        int ans = 0;
        int n = 5;
        //int n = 6;
        //int n = 5000;

        // 순간이동 : (현재까지 온 거리) x 2, 건전지 x
        // 한 번에 K 칸을 앞으로 점프, 건전지 K만큼 소모
        // 사용해야 하는 건전지 사용량의 최솟값을 return

        // 0 부터 n 까지의 최솟값을 구하는 것을 보며, n 부터 0까지 가는 최솟값을 생각해보았다.
        // 1. n에서 순간이동으로 절반씩 줄여가면 건전지를 쓰지 않는다.
        // 2. 건전지를 최소로 쓴다는 말을 듣고 홀수일 때만 이동을 하면 최소가 된다고 유추했다.
        // 3. n이 홀수와 짝수일 때의 조건으로 n을 줄여간다.
        //    홀수 일 땐 건전지 +1, n = n-1을 하여 n을 짝수로 세팅하고
        //    짝수 일 땐 건전지를 쓰지 않고 n을 반씩 줄여준다.

        while (n != 0) {
            if (n % 2 == 1) { // 현재 n이 홀수이면
                ans += 1;
                n -= 1;
            } else if (n % 2 == 0) { // 현재 n이 짝수이면
                n /= 2;
            }
        }
        System.out.println(ans);
    }
}
